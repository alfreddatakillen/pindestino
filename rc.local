#!/bin/bash

cd /home
tar xjf pi.tar.bz2

APP_DIR=""
while [ "$APP_DIR" = "" ]; do
	echo "Waiting for USB media with app/package.json and app/pindestino.conf files..."
	for D in $(ls /media); do
		if [ -d "/media/$D" ]; then
			if [ -d "/media/$D/app" ]; then
				if [ -e "/media/$D/app/pindestino.conf" ]; then
					if [ -e "/media/$D/app/package.json" ]; then
						APP_DIR="/media/$D/app"
						MOUNT_DIR="/media/$D"
					fi
				fi
			fi
		fi
	done
	sleep 2;
done

# Access app dir from /tmp/app (independent of usbX...)
# (/tmp/app is used by xinitrc)
ln -s $APP_DIR /tmp/app

cd "$APP_DIR"

if [ "$(cat pindestino.conf | grep -E "usb:\s+rw")" != "" ]; then
	DEVICE="$(mount -v | grep "$MOUNT_DIR" | awk '{print $1}')"
	echo "Mounting $DEVICE in read-write mode at $MOUNT_DIR"
	mount -o remount,rw $DEVICE $MOUNT_DIR
fi

if [ "$(cat pindestino.conf | grep "^bootscript:")" ]; then
	SCRIPT="$(cat pindestino.conf | grep "^bootscript:" | sed -r 's/^bootscript://' | xargs )"
	echo "Running bootscript $SCRIPT"
	bash $SCRIPT
fi

TIMEZONE="$(cat pindestino.conf | ruby -ryaml -e "data = YAML::load(STDIN.read); puts data['timezone']")"
if [ "$TIMEZONE" = "" ]; then
	TIMEZONE="Etc/UTC"
fi
export TZ="$TIMEZONE"
cp /usr/share/zoneinfo/${TIMEZONE} /etc/rw/localtime
echo "$TIMEZONE" > /etc/rw/timezone

if [ "$(cat pindestino.conf | ruby -ryaml -e "data = YAML::load(STDIN.read); puts data['wifi']")" != "" ]; then
	NETWORK="$(cat pindestino.conf | ruby -ryaml -e "data = YAML::load(STDIN.read); puts data['wifi']['network']")"
	PASSWORD="$(cat pindestino.conf | ruby -ryaml -e "data = YAML::load(STDIN.read); puts data['wifi']['password']")"
	echo "" >>/etc/network/interfaces
	echo "allow-hotplug wlan0" >>/etc/network/interfaces
	echo "auto wlan0" >>/etc/network/interfaces
	echo "iface wlan0 inet dhcp" >>/etc/network/interfaces
	echo "	wpa-ssid \"$NETWORK\"" >>/etc/network/interfaces
	echo "	wpa-psk \"$PASSWORD\"" >>/etc/network/interfaces
else
	echo "" >>/etc/network/interfaces
	echo "allow-hotplug eth0" >>/etc/network/interfaces
	echo "auto eth0" >>/etc/network/interfaces
	echo "iface eth0 inet dhcp" >>/etc/network/interfaces
fi
/etc/init.d/networking restart

echo "Starting node js app (npm start)"
NODE_JS_HOME="/opt/nodejs" PATH="$PATH:$NODE_JS_HOME/bin" PORT="80" npm start &

while [ "$(netstat -lnp | grep node | grep 80 | grep LISTEN)" = "" ]; do
	echo "Waiting for 0.0.0.0:80 listener to start..."
	sleep 2;
done

su - pi -c 'startx' &
